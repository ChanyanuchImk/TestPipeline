name: CI/CD with Auto EC2 Create

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Check if EC2 already exists
        id: check_ec2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=NoiseMap" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "EC2 not found, creating new one..."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0e731c8a588258d0d \
              --instance-type t3.micro \
              --key-name NoiseMapKey \
              --security-group-ids sg-0123456789abcdef \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Project,Value=NoiseMap}]' \
              --query "Instances[0].InstanceId" --output text)

            echo "Waiting for EC2 to be ready..."
            aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
          else
            echo "EC2 already exists: $INSTANCE_ID"
          fi

          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "EC2_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Setup SSH for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_IP >> ~/.ssh/known_hosts

      - name: Deploy Docker Stack on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@$EC2_IP << 'EOF'
            set -e
            sudo yum install -y docker
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -aG docker $USER

            # ติดตั้ง docker compose ถ้ายังไม่มี
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            mkdir -p ~/noisemap
            cd ~/noisemap

            # ดึงไฟล์จาก repo
            rm -rf ./*
            exit
          EOF

      - name: Copy Compose files
        run: |
          scp -i ~/.ssh/id_rsa -r \
            Noise_Map_tonkit.yaml nginx.conf initialSQL.sql frontend \
            ec2-user@$EC2_IP:/home/ec2-user/noisemap/

      - name: Start Compose
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@$EC2_IP << 'EOF'
            cd ~/noisemap
            docker compose down || true
            docker compose up -d
            docker compose ps
          EOF
