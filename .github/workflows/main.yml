name: CI/CD Pipeline NoiseMap

on:
  push:
    branches: [ "main" ]

concurrency:
  group: noisemap-main
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login Docker Hub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build & Push Image
      - name: Build and Push Nginx image
        run: |
          echo "Building NoiseMap custom Nginx image..."
          cat <<'DOCKERFILE' > Dockerfile.nginx
          FROM nginx:latest
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          COPY frontend/ /usr/share/nginx/html/
          DOCKERFILE

          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:${{ github.sha }} -f Dockerfile.nginx .
          docker tag  ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:latest

      # Configure AWS Credentials
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Ensure EC2 exists
      - name: Ensure EC2 instance exists
        id: ec2
        run: |
          echo "Checking EC2 instance..."
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=NoiseMap" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)

          if [ -z "$INSTANCE_ID" ]; then
            echo "Creating new EC2 instance..."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0e731c8a588258d0d \
              --instance-type t3.micro \
              --key-name noisemapkey \
              --security-groups default \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Project,Value=NoiseMap}]' \
              --query "Instances[0].InstanceId" --output text)
            echo "Waiting for instance to be ready..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          else
            echo "Reusing EC2: $INSTANCE_ID"
          fi

          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[].Instances[].PublicIpAddress" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "EC2_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "EC2 IP = $PUBLIC_IP"

      - name: Setup SSH connection
        run: |
          export HOME=/home/runner
          mkdir -p ~/.ssh
      
          # เขียนคีย์โดยคง newline ครบ
          printf "%s\n" "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
      
          echo "⚠️ Skipping ssh-keyscan (บาง runner อาจ timeout)"
          # ไม่ต้องใช้ ssh-keyscan แล้ว
          # ใช้ StrictHostKeyChecking=no เพื่อไม่ตรวจ host key
      
          echo "✅ Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} "echo ✅ Connected to EC2"

      # Copy files
      - name: Copy NoiseMap files to EC2
        run: |
          echo "Uploading compose & configs..."
          scp -i ~/.ssh/id_rsa -r \
          Noise_Map_tonkit.yaml nginx.conf initialSQL.sql frontend \
          ec2-user@$EC2_IP:/home/ec2-user/noisemap/

      # Deploy remotely
      - name: Deploy on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@$EC2_IP << 'EOF'
            set -e
            
      - name: Deploy NoiseMap on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@$EC2_IP << 'EOF'
            set -e
            echo "Deploying NoiseMap stack..."
            cd ~/noisemap
      
            echo "Installing Docker..."
            if ! command -v docker &> /dev/null; then
              sudo dnf update -y
              sudo dnf install -y docker
              sudo systemctl enable docker
              sudo systemctl start docker
            fi
      
            echo "Installing Docker Compose plugin..."
            if ! sudo docker compose version &> /dev/null; then
              sudo mkdir -p /usr/libexec/docker/cli-plugins
              sudo curl -SL https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64 \
                -o /usr/libexec/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/libexec/docker/cli-plugins/docker-compose
            fi
      
            echo "Docker version check"
            sudo docker --version
            sudo docker compose version
      
            echo "Pulling latest Nginx image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:latest
      
            echo "Restarting stack..."
            sudo docker compose -f Noise_Map_tonkit.yaml pull
            sudo docker compose -f Noise_Map_tonkit.yaml down
            sudo docker compose -f Noise_Map_tonkit.yaml up -d
      
            echo "Deployment complete!"
            sudo docker compose -f Noise_Map_tonkit.yaml ps
          EOF


