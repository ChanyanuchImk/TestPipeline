name: CI/CD Pipeline NoiseMap

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: noisemap-main
  cancel-in-progress: true

jobs:
  #Build & Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build a single NoiseMap image (compose handled on EC2)
      - name: Build and Push Docker images
        run: |
          echo "Building NoiseMap Images..."
          docker compose -f Noise_Map_tonkit.yaml config > /dev/null

          echo "Skipping build for service images (using official images: postgis, geoserver, nginx)"
          echo "Preparing Nginx custom image with frontend..."

          # Create a temporary Dockerfile for Nginx + Frontend
          cat <<'DOCKERFILE' > Dockerfile.nginx
          FROM nginx:latest
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          COPY frontend/ /usr/share/nginx/html/
          DOCKERFILE

          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:${{ github.sha }} -f Dockerfile.nginx .
          docker tag  ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:latest

          docker push ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:latest

  #Deploy on EC2
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Copy compose & configs to EC2
        run: |
          scp -i ~/.ssh/id_rsa -r \
          Noise_Map_tonkit.yaml nginx.conf initialSQL.sql frontend \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/noisemap/


      - name: Deploy NoiseMap on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "Deploying NoiseMap Stack..."
            cd ~/noisemap

            echo "Pulling latest Nginx image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/noisemap-nginx:latest

            echo "Restarting services..."
            docker compose -f Noise_Map_tonkit.yaml pull
            docker compose -f Noise_Map_tonkit.yaml down
            docker compose -f Noise_Map_tonkit.yaml up -d

            echo "Deployment complete!"
            docker compose -f Noise_Map_tonkit.yaml ps
          EOF
